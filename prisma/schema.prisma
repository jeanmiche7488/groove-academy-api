// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseType {
  COURSE
  WORKSHOP
}

enum InstrumentType {
  GUITAR
  BASS
  PIANO
  VOCAL
  DRUMS
}

enum WorkshopType {
  JAM_SESSION
  COMPOSITION
  CONCERT_PREP
  IMPROVISATION
}

enum CourseCategory {
  INDIVIDUAL
  DUO_TRIO
}

enum StudentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OfferType {
  TRIAL
  SUBSCRIPTION
}

enum ContentType {
  DOCUMENT
  VIDEO
  LINK
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum MembershipType {
  MANDATORY
  OPTIONAL
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum NotificationType {
  COURSE_UPDATE
  PAYMENT_REMINDER
  MEMBERSHIP_EXPIRING
  MESSAGE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  phone     String?
  specialty String?  // Spécialité instrumentale
  hourlyRate Float?  // Tarif horaire
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations selon le rôle
  teacherProfile Teacher?
  studentProfile Student?

  // Relations pour les commandes
  orders         Order[]    @relation("StudentOrders")
  offers         Offer[]    @relation("StudentOffers")
  reservations   Reservation[]
  availabilities TeacherAvailability[]
  payments       Payment[]  @relation("StudentPayments")
  contents       Content[]
  subscriptions  Subscription[]
  memberships    Membership[]
  notifications  Notification[]
  sentMessages   Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Teacher {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  courses   Course[]
  instruments TeacherInstrument[]  // Instruments que le professeur peut enseigner
  workshops  TeacherWorkshop[]     // Ateliers que le professeur peut animer
  totalEarnings Float @default(0)  // Total des gains du mois
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  enrollments Enrollment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String
  type        CourseType
  maxStudents Int
  pricePerStudent Float
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  schedules   CourseSchedule[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations pour les commandes et paiements
  orders      Order[]    @relation("CourseOrders")
  offers      Offer[]
  availableSlots AvailableSlot[]
  price       Price?     @relation(fields: [priceId], references: [id])
  priceId     String?
  payments    Payment[]  @relation("CoursePayments")
  contents    Content[]
  subscriptions Subscription[]
  reservations Reservation[]
}

model Enrollment {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  status    PaymentStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  weekId    String
  week      Week     @relation(fields: [weekId], references: [id])
  dayOfWeek Int      // 1-7 pour Lundi-Dimanche
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Week {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  schedules CourseSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation("StudentOrders", fields: [studentId], references: [id])
  courseId    String
  course      Course   @relation("CourseOrders", fields: [courseId], references: [id])
  slotId      String
  slot        AvailableSlot @relation(fields: [slotId], references: [id])
  status      OrderStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payment     Payment?
}

model Offer {
  id          String   @id @default(uuid())
  type        OfferType
  studentId   String
  student     User     @relation("StudentOffers", fields: [studentId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  slotId      String
  slot        AvailableSlot @relation(fields: [slotId], references: [id])
  status      OfferStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AvailableSlot {
  id          String   @id @default(uuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  offers      Offer[]
  orders      Order[]
}

model Price {
  id          String   @id @default(uuid())
  amount      Float
  currency    String   @default("EUR")
  description String?
  type        String   // "INDIVIDUAL", "DUO_TRIO", "WORKSHOP", "TRIAL"
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeacherInstrument {
  id          String   @id @default(uuid())
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  instrument  InstrumentType
  level       String   // Niveau d'expertise (débutant, intermédiaire, avancé)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeacherWorkshop {
  id          String   @id @default(uuid())
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  workshopType WorkshopType
  description String?  // Description de l'atelier
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeacherAvailability {
  id        String   @id @default(uuid())
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  dayOfWeek Int      // 0-6 (Dimanche-Samedi)
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  isRecurring Boolean @default(true)  // Si la disponibilité est récurrente
  startDate DateTime? // Date de début si non récurrent
  endDate   DateTime? // Date de fin si non récurrent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(uuid())
  date      DateTime
  status    String   // PENDING, CONFIRMED, CANCELLED
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation("StudentPayments", fields: [studentId], references: [id])
  courseId    String
  course      Course   @relation("CoursePayments", fields: [courseId], references: [id])
  amount      Float
  status      PaymentStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
}

model Content {
  id          String      @id @default(uuid())
  title       String
  description String?
  type        ContentType
  url         String
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  teacherId   String
  teacher     User        @relation(fields: [teacherId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subscription {
  id              String            @id @default(uuid())
  studentId       String
  student         User              @relation(fields: [studentId], references: [id])
  courseId        String
  course          Course            @relation(fields: [courseId], references: [id])
  status          SubscriptionStatus @default(ACTIVE)
  paymentStatus   PaymentStatus     @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  monthlyPrice    Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Membership {
  id          String         @id @default(uuid())
  studentId   String
  student     User           @relation(fields: [studentId], references: [id])
  type        MembershipType
  amount      Float
  year        Int
  paymentStatus PaymentStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  content     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

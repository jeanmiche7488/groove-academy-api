// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseType {
  INSTRUMENT
  WORKSHOP
}

enum InstrumentType {
  GUITAR
  BASS
  PIANO
  VOCAL
  DRUMS
}

enum WorkshopType {
  JAM_SESSION
  COMPOSITION
  CONCERT_PREP
  IMPROVISATION
}

enum CourseCategory {
  INDIVIDUAL
  DUO_TRIO
}

enum StudentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OfferType {
  TRIAL
  SUBSCRIPTION
}

enum ContentType {
  DOCUMENT
  VIDEO
  LINK
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum MembershipType {
  MANDATORY
  OPTIONAL
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum NotificationType {
  COURSE_UPDATE
  PAYMENT_REMINDER
  MEMBERSHIP_EXPIRING
  MESSAGE
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  phone         String?
  address       String?
  specialty     String?   // Pour les professeurs
  bio           String?   // Pour les professeurs
  level         StudentLevel? // Pour les étudiants uniquement
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  teacherCourses    Course[]            @relation("TeacherCourses")
  studentCourses    Course[]            @relation("StudentCourses")
  messages          Message[]
  reservations      Reservation[]
  availabilities    TeacherAvailability[]
  studentPayments   Payment[]           @relation("StudentPayments")
  orders            Order[]             @relation("StudentOrders")
  receivedOffers    Offer[]             @relation("StudentOffers")
  contents          Content[]
  subscriptions     Subscription[]
  memberships       Membership[]
  notifications     Notification[]
}

model Course {
  id          String     @id @default(uuid())
  name        String
  description String?
  type        CourseType
  category    CourseCategory
  instrumentType InstrumentType?  // Pour les cours d'instruments
  workshopType   WorkshopType?    // Pour les ateliers
  duration    Int        // en minutes
  priceId     String     // Lien vers la table des prix
  price       Price      @relation(fields: [priceId], references: [id])
  maxStudents Int?       // Pour les ateliers
  teacherId   String
  teacher     User       @relation("TeacherCourses", fields: [teacherId], references: [id])
  students    User[]     @relation("StudentCourses")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  reservations    Reservation[]
  schedules       CourseSchedule[]
  coursePayments  Payment[]           @relation("CoursePayments")
  orders          Order[]             @relation("CourseOrders")
  availableSlots  AvailableSlot[]     // Nouveau: créneaux disponibles
  offers          Offer[]             // Nouveau: offres liées au cours
  contents        Content[]
  subscriptions   Subscription[]
}

// Nouvelle table pour les créneaux disponibles
model AvailableSlot {
  id          String   @id @default(uuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  offers      Offer[]
  orders      Order[]
}

// Table pour les prix
model Price {
  id          String   @id @default(uuid())
  amount      Float
  currency    String   @default("EUR")
  description String?
  type        String   // "INDIVIDUAL", "DUO_TRIO", "WORKSHOP", "TRIAL"
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseSchedule {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  dayOfWeek Int      // 0-6 (Dimanche-Samedi)
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  room      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeacherAvailability {
  id        String   @id @default(uuid())
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  dayOfWeek Int      // 0-6 (Dimanche-Samedi)
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(uuid())
  date      DateTime
  status    String   // PENDING, CONFIRMED, CANCELLED
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  content     String
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  status        String   // PENDING, COMPLETED, FAILED
  studentId     String
  student       User     @relation("StudentPayments", fields: [studentId], references: [id])
  courseId      String
  course        Course   @relation("CoursePayments", fields: [courseId], references: [id])
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Content {
  id          String      @id @default(uuid())
  title       String
  description String?
  type        ContentType
  url         String
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  teacherId   String
  teacher     User        @relation(fields: [teacherId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subscription {
  id              String            @id @default(uuid())
  studentId       String
  student         User              @relation(fields: [studentId], references: [id])
  courseId        String
  course          Course            @relation(fields: [courseId], references: [id])
  status          SubscriptionStatus @default(ACTIVE)
  paymentStatus   PaymentStatus     @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  monthlyPrice    Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Membership {
  id          String         @id @default(uuid())
  studentId   String
  student     User           @relation(fields: [studentId], references: [id])
  type        MembershipType
  amount      Float
  year        Int
  paymentStatus PaymentStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  content     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

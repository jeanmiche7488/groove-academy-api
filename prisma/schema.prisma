// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum CourseType {
  INSTRUMENT
  WORKSHOP
}

enum InstrumentType {
  GUITAR
  BASS
  PIANO
  VOCAL
  DRUMS
}

enum WorkshopType {
  JAM_SESSION
  COMPOSITION
  CONCERT_PREP
  IMPROVISATION
}

enum CourseCategory {
  INDIVIDUAL
  DUO_TRIO
}

enum StudentLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OfferType {
  TRIAL
  SUBSCRIPTION
}

enum ContentType {
  DOCUMENT
  VIDEO
  LINK
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum MembershipType {
  MANDATORY
  OPTIONAL
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum NotificationType {
  COURSE_UPDATE
  PAYMENT_REMINDER
  MEMBERSHIP_EXPIRING
  MESSAGE
}

enum WaitlistStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  phone         String?
  address       String?
  specialty     String?   // Pour les professeurs
  bio           String?   // Pour les professeurs
  level         StudentLevel? // Pour les étudiants uniquement
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations pour les cours
  teachingCourses Course[] @relation("TeacherCourses")
  enrolledCourses Course[] @relation("StudentCourses")
  replacements    TeacherReplacement[]
  waitlistEntries WaitlistEntry[]

  // Relations pour les disponibilités
  availabilities TeacherAvailability[]

  // Relations
  messages          Message[]         @relation("SentMessages")
  receivedMessages  Message[]         @relation("ReceivedMessages")
  reservations      Reservation[]
  studentPayments   Payment[]         @relation("StudentPayments")
  orders            Order[]           @relation("StudentOrders")
  receivedOffers    Offer[]           @relation("StudentOffers")
  contents          Content[]         @relation("UserContents")
  subscriptions     Subscription[]
  memberships       Membership[]
  notifications     Notification[]
}

model Price {
  id        String   @id @default(uuid())
  amount    Float
  currency  String   @default("EUR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @unique

  @@map("prices")
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        CourseType
  category    CourseCategory
  instrument  InstrumentType?
  workshop    WorkshopType?
  level       StudentLevel
  objectives  String?
  maxStudents Int
  duration    Int
  price       Price?
  teacherId   String
  teacher     User     @relation("TeacherCourses", fields: [teacherId], references: [id])
  students    User[]   @relation("StudentCourses")
  schedules   CourseSchedule[]
  contents    Content[]
  waitlist    WaitlistEntry[]
  replacements TeacherReplacement[]
  reservations Reservation[]
  payments    Payment[]    @relation("CoursePayments")
  subscriptions Subscription[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("courses")
}

model CourseSchedule {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  dayOfWeek Int      // 0-6 (Dimanche-Samedi)
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  room      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeacherReplacement {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  teacher   User     @relation(fields: [teacherId], references: [id])
  teacherId String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaitlistEntry {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  status    WaitlistStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, studentId])
}

model Content {
  id          String   @id @default(uuid())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  creator     User     @relation("UserContents", fields: [creatorId], references: [id])
  creatorId   String
  title       String
  description String?
  type        ContentType
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeacherAvailability {
  id        String   @id @default(uuid())
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  dayOfWeek Int      // 0-6 (Dimanche-Samedi)
  startTime String   // Format HH:mm
  endTime   String   // Format HH:mm
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(uuid())
  date      DateTime
  status    String   // PENDING, CONFIRMED, CANCELLED
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  content     String
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  status        String   // PENDING, COMPLETED, FAILED
  studentId     String
  student       User     @relation("StudentPayments", fields: [studentId], references: [id])
  courseId      String
  course        Course   @relation("CoursePayments", fields: [courseId], references: [id])
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id              String            @id @default(uuid())
  studentId       String
  student         User              @relation(fields: [studentId], references: [id])
  courseId        String
  course          Course            @relation(fields: [courseId], references: [id])
  status          SubscriptionStatus @default(ACTIVE)
  paymentStatus   PaymentStatus     @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  monthlyPrice    Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Membership {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        MembershipType
  duration    Int      // durée en jours
  price       Float
  features    String[] // liste des avantages de l'adhésion
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]   // les utilisateurs qui ont cette adhésion

  @@map("memberships")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  content     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation("StudentOrders", fields: [studentId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]
}

model Offer {
  id          String   @id @default(uuid())
  studentId   String
  student     User     @relation("StudentOffers", fields: [studentId], references: [id])
  type        OfferType
  status      OfferStatus @default(PENDING)
  amount      Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
